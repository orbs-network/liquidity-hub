// SPDX-License-Identifier: MIT
pragma solidity 0.8.x;

import "forge-std/Test.sol";

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

import {BaseTest, ERC20Mock, IWETH} from "test/base/BaseTest.sol";

import {LiquidityHub, Treasury, SignedOrder, Call, Consts} from "src/LiquidityHub.sol";

contract LiquidityHubForkTest is BaseTest {
    address public constant PARASWAP = 0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57;

    uint256 public swapperPK;
    address public swapper;

    function setUp() public override {
        super.setUp();
        vm.createSelectFork(vm.envString("RPC_URL_MATIC"), 49698100);
        initProductionConfig();
        (swapper, swapperPK) = makeAddrAndKey("swapper");
    }

    function testFork_Paraswap() public {
        address paraswapTokenProxy = IParaswap(PARASWAP).getTokenTransferProxy();
        assertNotEq(paraswapTokenProxy, address(0));

        ERC20 inToken = ERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174); // USDC
        ERC20 outToken = ERC20(0xc2132D05D31c914a87C6611C10748AEb04B58e8F); // USDT
        vm.label(address(inToken), "inToken");
        vm.label(address(outToken), "outToken");

        uint256 inAmount = 1000 * (10 ** inToken.decimals());
        uint256 outAmount = 900 * (10 ** outToken.decimals());

        hoax(swapper, 0);
        inToken.approve(Consts.PERMIT2_ADDRESS, inAmount);

        SignedOrder[] memory orders = new SignedOrder[](1);
        orders[0] = createAndSignOrder(swapper, swapperPK, address(inToken), address(outToken), inAmount, outAmount);

        Call[] memory calls = new Call[](2);
        calls[0] = Call(
            address(inToken), abi.encodeWithSelector(inToken.approve.selector, paraswapTokenProxy, type(uint256).max)
        );
        calls[1] = Call(
            PARASWAP,
            bytes(
                hex"54e3f31b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b96d6a500000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000654bf9e81fa1800f9f424f7cb5a1d4b37655d45e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f5b509bb0909a69b1c207e495f687a596c168e120000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee57000000000000000000000000000000000000000000000000000000006554e007000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000282791bca1f2de4661ed88a30c99a7a9449aa84174c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            )
        );

        deal(address(inToken), swapper, inAmount);
        assertEq(inToken.balanceOf(swapper), inAmount);

        hoax(config.treasury.owner());
        config.executor.execute(orders, calls);
        assertEq(outToken.balanceOf(address(config.executor)), 0);
        assertEq(outToken.balanceOf(swapper), outAmount);
        assertEq(outToken.balanceOf(address(config.treasury)), 265066035); // gas fees, including slippage
    }
}

interface IParaswap {
    function getTokenTransferProxy() external view returns (address);
}
