// SPDX-License-Identifier: MIT
pragma solidity 0.8.x;

import "forge-std/Test.sol";

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

import {BaseTest, ERC20Mock, IWETH} from "test/base/BaseTest.sol";

import {LiquidityHub, Treasury, SignedOrder, Call, Consts} from "src/LiquidityHub.sol";

contract LiquidityHubForkTest is BaseTest {
    address public constant PARASWAP = 0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57;

    uint256 public swapperPK;
    address public swapper;

    function setUp() public override {
        super.setUp();
        vm.createSelectFork(vm.envString("RPC_URL_MATIC"), 50487945);
        initProductionConfig();
        (swapper, swapperPK) = makeAddrAndKey("swapper");
    }

    function testFork_Paraswap() public {
        address paraswapTokenProxy = IParaswap(PARASWAP).getTokenTransferProxy();
        assertNotEq(paraswapTokenProxy, address(0));

        ERC20 inToken = ERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174); // USDC
        ERC20 outToken = ERC20(0xc2132D05D31c914a87C6611C10748AEb04B58e8F); // USDT
        vm.label(address(inToken), "inToken");
        vm.label(address(outToken), "outToken");

        uint256 inAmount = 1000 * (10 ** inToken.decimals());
        uint256 outAmount = 900 * (10 ** outToken.decimals());
        uint256 outAmountGas = 1 * (10 ** outToken.decimals());

        hoax(swapper, 0);
        inToken.approve(Consts.PERMIT2_ADDRESS, inAmount);

        SignedOrder[] memory orders = new SignedOrder[](1);
        orders[0] = createAndSignOrder(
            swapper, swapperPK, address(inToken), address(outToken), inAmount, outAmount, outAmountGas
        );

        Call[] memory calls = new Call[](2);
        calls[0] = Call(
            address(inToken), abi.encodeWithSelector(inToken.approve.selector, paraswapTokenProxy, type(uint256).max)
        );
        calls[1] = Call(
            PARASWAP,
            bytes(
                hex"54e3f31b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b9a8b7600000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000006565bbe90ba51933094146b689ce86174a786e38000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d315a9c38ec871068fec378e4ce78af528c7629300000000000000000000000000000000000000000000000000000000000003c452bbbe2900000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003aa389f8000000000000000000000000000000000000000000000000000000006565bbe90e58b97a209526d6c85fff215f48284be9611c8a00020000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000060b23961a391a000000000000000000000000000000000000000000000000000000006565bbe900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000064bc3532991d8147167ee028a7adbf01c05594f70000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000de0cc6023ec8ec00000000000000036c090d0ca6888000000000000000046aed46de875631100000000000000005384ed853edfca70b0000000000000000000000000000000000000000000001e140ddf5e77621f92d848000000000000000003782dace9d90000000000000000000000000000000000000000000000000000000000006565bbc90000000000000000000009184e72a0000000000000000000000000000000000000000000000000000000000000000041eb1d15628628d4cf0e076a307a7fcaae34fe84e34f330b696abdeb6e6bcba0a32e9d6e7e3c77de15d92f3352ac64ae6d5cd43c45dfa8b1b88e6aeff5855948941b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            )
        );

        deal(address(inToken), swapper, inAmount);
        assertEq(inToken.balanceOf(swapper), inAmount);

        assertEq(outToken.balanceOf(address(config.executor)), 0);
        assertEq(outToken.balanceOf(swapper), 0);
        deal(address(outToken), address(config.treasury), 0);
        assertEq(outToken.balanceOf(address(config.treasury)), 0);
        deal(address(outToken), config.feeRecipient, 0);
        assertEq(outToken.balanceOf(config.feeRecipient), 0);

        hoax(config.treasury.owner());
        config.executor.execute(orders, calls);

        assertEq(outToken.balanceOf(address(config.executor)), 0, "no executor leftovers");
        assertEq(outToken.balanceOf(swapper), outAmount, "swapper output tokens");
        assertEq(outToken.balanceOf(address(config.treasury)), outAmountGas, "gas reimbursement");
        assertEq(outToken.balanceOf(config.feeRecipient), 98476431, "positive slippage as fees");
    }
}

interface IParaswap {
    function getTokenTransferProxy() external view returns (address);
}
